name: "Build Containers"

on:
  workflow_dispatch:
  push:
    tags:
      - '*'   # dispara ao push de qualquer tag (ex.: v1.0.0)

permissions:
  contents: read
  packages: write   # necessário para publicar no GHCR com o GITHUB_TOKEN

jobs:
  build-containers-common:
    runs-on: ubuntu-latest
    outputs:
      containerver: ${{ steps.getcontainerver.outputs.containerver }}
    steps:
      - name: Get Container Version
        id: getcontainerver
        run: |
          echo "containerver=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"

  build-containers:
    needs: build-containers-common
    strategy:
      matrix:
        include:
          - runnertags: ubuntu-latest
            arch: amd64
          - runnertags: ubuntu-24.04-arm   # garanta que esse runner ARM exista; senão, remova esta linha
            arch: arm64
    runs-on: ${{ matrix.runnertags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute GHCR image path (owner lowercase)
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/$OWNER_LOWER/postiz-app" >> $GITHUB_ENV
          echo "Will push to: $IMAGE"

      # Buildx via CLI (sem ação externa)
      - name: Enable Buildx
        run: |
          docker buildx create --name ci-builder --use || docker buildx use ci-builder
          docker buildx inspect --bootstrap

      # Login no GHCR via CLI usando o GITHUB_TOKEN
      - name: Login to ghcr (CLI)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Push Image
        env:
          CONTAINERVER: ${{ needs.build-containers-common.outputs.containerver }}
          NEXT_PUBLIC_VERSION: ${{ github.ref_name }}
        run: |
          echo "Building $IMAGE:${CONTAINERVER}-${{ matrix.arch }}"
          docker buildx build --platform linux/${{ matrix.arch }} \
            -f Dockerfile.dev \
            -t "$IMAGE:${CONTAINERVER}-${{ matrix.arch }}" \
            --build-arg NEXT_PUBLIC_VERSION="${NEXT_PUBLIC_VERSION}" \
            --provenance=false --sbom=false \
            --output "type=registry,name=$IMAGE:${CONTAINERVER}-${{ matrix.arch }}" .

  build-container-manifest:
    needs: [build-containers, build-containers-common]
    runs-on: ubuntu-latest
    steps:
      - name: Compute GHCR image path (owner lowercase)
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/$OWNER_LOWER/postiz-app" >> $GITHUB_ENV
          echo "Using: $IMAGE"

      # Login no GHCR via CLI usando o GITHUB_TOKEN
      - name: Login to ghcr (CLI)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Create Docker Manifest
        env:
          CONTAINERVER: ${{ needs.build-containers-common.outputs.containerver }}
        run: |
          echo "Verifying per-arch images:"
          docker buildx imagetools inspect "$IMAGE:${CONTAINERVER}-amd64"
          docker buildx imagetools inspect "$IMAGE:${CONTAINERVER}-arm64"

          echo "Removing existing manifests (if any)"
          docker manifest rm "$IMAGE:${CONTAINERVER}" || true
          docker manifest rm "$IMAGE:latest" || true

          echo "Creating and pushing version manifest"
          docker manifest create "$IMAGE:${CONTAINERVER}" \
            --amend "$IMAGE:${CONTAINERVER}-amd64" \
            --amend "$IMAGE:${CONTAINERVER}-arm64"
          docker manifest push "$IMAGE:${CONTAINERVER}"

          echo "Creating and pushing latest manifest"
          docker manifest create "$IMAGE:latest" \
            --amend "$IMAGE:${CONTAINERVER}-amd64" \
            --amend "$IMAGE:${CONTAINERVER}-arm64"
          docker manifest push "$IMAGE:latest"

      - name: Verify Manifest
        run: |
          docker manifest inspect "$IMAGE:latest"
