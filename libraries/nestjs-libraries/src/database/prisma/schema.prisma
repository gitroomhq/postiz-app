generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                String             @id @default(uuid())
  name              String
  description       String?
  apiKey            String?
  paymentId         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  allowTrial        Boolean            @default(false)
  isTrailing        Boolean            @default(false)
  Assessment        Assessment[]
  autoPost          AutoPost[]
  Comments          Comments[]
  credits           Credits[]
  customers         Customer[]
  errors            Errors[]
  github            GitHub[]
  Integration       Integration[]
  media             Media[]
  buyerOrganization MessagesGroup[]
  notifications     Notifications[]
  plugs             Plugs[]
  post              Post[]             @relation("organization")
  submittedPost     Post[]             @relation("submittedForOrg")
  sets              Sets[]
  signatures        Signatures[]
  subscription      Subscription?
  tags              Tags[]
  thirdParty        ThirdParty[]
  usedCodes         UsedCodes[]
  users             UserOrganization[]
  webhooks          Webhooks[]
}

model Tags {
  id           String       @id @default(uuid())
  name         String
  color        String
  orgId        String
  deletedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [orgId], references: [id])
  posts        TagsPosts[]

  @@index([orgId])
  @@index([deletedAt])
}

model TagsPosts {
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  tag       Tags     @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@unique([postId, tagId])
}

model User {
  id                    String             @id @default(uuid())
  email                 String
  password              String?
  providerName          Provider
  name                  String?
  lastName              String?
  isSuperAdmin          Boolean            @default(false)
  bio                   String?
  audience              Int                @default(0)
  pictureId             String?
  providerId            String?
  timezone              Int
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  lastReadNotifications DateTime           @default(now())
  inviteId              String?
  activated             Boolean            @default(true)
  marketplace           Boolean            @default(true)
  account               String?
  connectedAccount      Boolean            @default(false)
  lastOnline            DateTime           @default(now())
  ip                    String?
  agent                 String?
  comments              Comments[]
  items                 ItemUser[]
  groupBuyer            MessagesGroup[]    @relation("groupBuyer")
  groupSeller           MessagesGroup[]    @relation("groupSeller")
  orderBuyer            Orders[]           @relation("orderBuyer")
  orderSeller           Orders[]           @relation("orderSeller")
  payoutProblems        PayoutProblems[]
  agencies              SocialMediaAgency?
  picture               Media?             @relation(fields: [pictureId], references: [id])
  organizations         UserOrganization[]

  @@unique([email, providerName])
  @@index([lastReadNotifications])
  @@index([inviteId])
  @@index([account])
  @@index([lastOnline])
  @@index([pictureId])
}

model UsedCodes {
  id           String       @id @default(uuid())
  code         String
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [orgId], references: [id])

  @@index([code])
}

model UserOrganization {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  disabled       Boolean      @default(false)
  role           Role         @default(USER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([disabled])
}

model GitHub {
  id             String       @id @default(uuid())
  login          String?
  name           String?
  token          String
  jobId          String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([login])
  @@index([organizationId])
}

model Trending {
  id           String   @id @default(uuid())
  trendingList String
  language     String?  @unique
  hash         String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([hash])
}

model TrendingLog {
  id       String   @id @default(uuid())
  language String?
  date     DateTime
}

model ItemUser {
  id     String @id @default(uuid())
  userId String
  key    String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@index([userId])
  @@index([key])
}

model Star {
  id         String   @id @default(uuid())
  stars      Int
  totalStars Int
  forks      Int
  totalForks Int
  login      String
  date       DateTime @default(now()) @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([login, date])
}

model Media {
  id                 String              @id @default(uuid())
  name               String
  path               String
  organizationId     String
  thumbnail          String?
  thumbnailTimestamp Int?
  alt                String?
  fileSize           Int                 @default(0)
  type               String              @default("image")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  organization       Organization        @relation(fields: [organizationId], references: [id])
  agencies           SocialMediaAgency[]
  userPicture        User[]

  @@index([name])
  @@index([organizationId])
  @@index([type])
}

model SocialMediaAgency {
  id               String                   @id @default(uuid())
  userId           String                   @unique
  name             String
  logoId           String?
  website          String?
  slug             String?
  facebook         String?
  instagram        String?
  twitter          String?
  linkedIn         String?
  youtube          String?
  tiktok           String?
  otherSocialMedia String?
  shortDescription String
  description      String
  approved         Boolean                  @default(false)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  deletedAt        DateTime?
  logo             Media?                   @relation(fields: [logoId], references: [id])
  user             User                     @relation(fields: [userId], references: [id])
  niches           SocialMediaAgencyNiche[]

  @@index([userId])
  @@index([deletedAt])
  @@index([id])
}

model SocialMediaAgencyNiche {
  agencyId String
  niche    String
  agency   SocialMediaAgency @relation(fields: [agencyId], references: [id])

  @@id([agencyId, niche])
}

model Credits {
  id             String       @id @default(uuid())
  organizationId String
  credits        Int
  type           String       @default("ai_images")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([createdAt])
}

model Subscription {
  id               String           @id @default(cuid())
  organizationId   String           @unique
  subscriptionTier SubscriptionTier
  identifier       String?
  cancelAt         DateTime?
  period           Period
  totalChannels    Int
  isLifetime       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  organization     Organization     @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([deletedAt])
}

model Customer {
  id           String        @id @default(uuid())
  name         String
  orgId        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  organization Organization  @relation(fields: [orgId], references: [id])
  integrations Integration[]

  @@unique([orgId, name, deletedAt])
}

model Integration {
  id                    String                 @id @default(cuid())
  internalId            String
  organizationId        String
  name                  String
  picture               String?
  providerIdentifier    String
  type                  String
  token                 String
  disabled              Boolean                @default(false)
  tokenExpiration       DateTime?
  refreshToken          String?
  profile               String?
  deletedAt             DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime?              @updatedAt
  inBetweenSteps        Boolean                @default(false)
  refreshNeeded         Boolean                @default(false)
  postingTimes          String                 @default("[{\"time\":120}, {\"time\":400}, {\"time\":700}]")
  customInstanceDetails String?
  customerId            String?
  rootInternalId        String?
  additionalSettings    String?                @default("[]")
  exisingPlugData       ExisingPlugData[]
  customer              Customer?              @relation(fields: [customerId], references: [id])
  organization          Organization           @relation(fields: [organizationId], references: [id])
  webhooks              IntegrationsWebhooks[]
  orderItems            OrderItems[]
  plugs                 Plugs[]
  posts                 Post[]

  @@unique([organizationId, internalId])
  @@index([rootInternalId])
  @@index([updatedAt])
  @@index([deletedAt])
  @@index([customerId])
}

model Signatures {
  id             String       @id @default(uuid())
  organizationId String
  content        String
  autoAdd        Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([createdAt])
  @@index([organizationId])
  @@index([deletedAt])
}

model Comments {
  id             String       @id @default(uuid())
  content        String
  organizationId String
  postId         String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  post           Post         @relation(fields: [postId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([organizationId])
  @@index([userId])
  @@index([postId])
  @@index([deletedAt])
}

model Post {
  id                         String                    @id @default(cuid())
  state                      State                     @default(QUEUE)
  publishDate                DateTime
  organizationId             String
  integrationId              String
  content                    String
  group                      String
  title                      String?
  description                String?
  parentPostId               String?
  releaseId                  String?
  releaseURL                 String?
  settings                   String?
  image                      String?
  submittedForOrderId        String?
  submittedForOrganizationId String?
  approvedSubmitForOrder     APPROVED_SUBMIT_FOR_ORDER @default(NO)
  lastMessageId              String?
  intervalInDays             Int?
  error                      String?
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  deletedAt                  DateTime?
  comments                   Comments[]
  errors                     Errors[]
  payoutProblems             PayoutProblems[]
  integration                Integration               @relation(fields: [integrationId], references: [id])
  lastMessage                Messages?                 @relation(fields: [lastMessageId], references: [id])
  organization               Organization              @relation("organization", fields: [organizationId], references: [id])
  parentPost                 Post?                     @relation("parentPostId", fields: [parentPostId], references: [id])
  childrenPost               Post[]                    @relation("parentPostId")
  submittedForOrder          Orders?                   @relation(fields: [submittedForOrderId], references: [id])
  submittedForOrganization   Organization?             @relation("submittedForOrg", fields: [submittedForOrganizationId], references: [id])
  tags                       TagsPosts[]

  @@index([group])
  @@index([deletedAt])
  @@index([publishDate])
  @@index([state])
  @@index([organizationId])
  @@index([parentPostId])
  @@index([submittedForOrderId])
  @@index([intervalInDays])
  @@index([approvedSubmitForOrder])
  @@index([lastMessageId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([releaseURL])
  @@index([integrationId])
}

model Notifications {
  id             String       @id @default(uuid())
  organizationId String
  content        String
  link           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([createdAt])
  @@index([organizationId])
  @@index([deletedAt])
}

model MessagesGroup {
  id                  String       @id @default(uuid())
  buyerOrganizationId String
  buyerId             String
  sellerId            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  messages            Messages[]
  buyer               User         @relation("groupBuyer", fields: [buyerId], references: [id])
  buyerOrganization   Organization @relation(fields: [buyerOrganizationId], references: [id])
  seller              User         @relation("groupSeller", fields: [sellerId], references: [id])
  orders              Orders[]

  @@unique([buyerId, sellerId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([buyerOrganizationId])
}

model PayoutProblems {
  id        String   @id @default(uuid())
  status    String
  orderId   String
  userId    String
  postId    String?
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Orders   @relation(fields: [orderId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Orders {
  id             String           @id @default(uuid())
  buyerId        String
  sellerId       String
  status         OrderStatus
  messageGroupId String
  captureId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ordersItems    OrderItems[]
  buyer          User             @relation("orderBuyer", fields: [buyerId], references: [id])
  messageGroup   MessagesGroup    @relation(fields: [messageGroupId], references: [id])
  seller         User             @relation("orderSeller", fields: [sellerId], references: [id])
  payoutProblems PayoutProblems[]
  posts          Post[]

  @@index([buyerId])
  @@index([sellerId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([messageGroupId])
}

model OrderItems {
  id            String      @id @default(uuid())
  orderId       String
  integrationId String
  quantity      Int
  price         Int
  integration   Integration @relation(fields: [integrationId], references: [id])
  order         Orders      @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([integrationId])
}

model Messages {
  id        String        @id @default(uuid())
  from      From
  content   String?
  groupId   String
  special   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  group     MessagesGroup @relation(fields: [groupId], references: [id])
  posts     Post[]

  @@index([groupId])
  @@index([createdAt])
  @@index([deletedAt])
}

model Plugs {
  id             String       @id @default(uuid())
  organizationId String
  plugFunction   String
  data           String
  integrationId  String
  activated      Boolean      @default(true)
  integration    Integration  @relation(fields: [integrationId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([plugFunction, integrationId])
  @@index([organizationId])
}

model ExisingPlugData {
  id            String      @id @default(uuid())
  integrationId String
  methodName    String
  value         String
  integration   Integration @relation(fields: [integrationId], references: [id])

  @@unique([integrationId, methodName, value])
}

model PopularPosts {
  id        String   @id @default(uuid())
  category  String
  topic     String
  content   String
  hook      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IntegrationsWebhooks {
  integrationId String
  webhookId     String
  integration   Integration @relation(fields: [integrationId], references: [id])
  webhook       Webhooks    @relation(fields: [webhookId], references: [id])

  @@id([integrationId, webhookId])
  @@unique([integrationId, webhookId])
  @@index([integrationId])
  @@index([webhookId])
}

model Webhooks {
  id             String                 @id @default(uuid())
  name           String
  organizationId String
  url            String
  deletedAt      DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  integrations   IntegrationsWebhooks[]
  organization   Organization           @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([deletedAt])
}

model AutoPost {
  id              String       @id @default(uuid())
  organizationId  String
  title           String
  content         String?
  onSlot          Boolean
  syncLast        Boolean
  url             String
  lastUrl         String
  active          Boolean
  addPicture      Boolean
  generateContent Boolean
  integrations    String
  deletedAt       DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@index([deletedAt])
}

model Sets {
  id             String       @id @default(uuid())
  organizationId String
  name           String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model ThirdParty {
  id             String       @id @default(uuid())
  organizationId String
  identifier     String
  name           String
  internalId     String
  apiKey         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, internalId])
  @@index([organizationId])
  @@index([deletedAt])
}

model Errors {
  id             String       @id @default(uuid())
  message        String
  body           String       @default("{}")
  platform       String
  organizationId String
  postId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  post           Post         @relation(fields: [postId], references: [id])

  @@index([organizationId])
  @@index([createdAt])
}

model Assessment {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  organizationId      String
  companyProfileId    String
  marketingGoals      MarketingGoalsType[]
  preferedContentType contentType[]
  companyProfile      CompanyProfile       @relation(fields: [companyProfileId], references: [id])
  organization        Organization         @relation(fields: [organizationId], references: [id])
  competitors         Competitor[]
}

model CompanyProfile {
  id             String          @id @default(cuid())
  name           String
  industry       IndustryType
  description    String
  website        String
  toneOfVoice    ToneOfVoiceType
  targetAudience String
  brandColor     String?
  assessments    Assessment[]
  offerings      Offering[]
}

model Competitor {
  id           String      @id @default(cuid())
  name         String
  website      String
  difference   String
  assessmentId String?
  Assessment   Assessment? @relation(fields: [assessmentId], references: [id])
}

model Offering {
  id               String          @id @default(cuid())
  name             String
  type             OfferingType
  keyFeature       String
  companyProfileId String?
  CompanyProfile   CompanyProfile? @relation(fields: [companyProfileId], references: [id])
}

enum contentType {
  EDUCATIONAL_POSTS
  BEHIND_THE_SCENES
  PRODUCT_SHOWCASE
  CUSTOMER_TESTIMONIALS
  INDUSTRY_NEWS
  TIPS_AND_TUTORIALS
  COMPANY_UPDATES
  USER_GENERATED_CONTENT
  INSPIRATIONAL_QUOTES
  INTERACTIVE_POLLS
  VIDEO_CONTENT
  INFOGRAPHICS
}

enum MarketingGoalsType {
  AWARENESS_AND_VISIBILITY
  LEAD_GENERATION
  SALES_INCREASE
  ACQUISITION_AND_ONBOARDING
  CUSTOMER_ENGAGEMENT
  RETENTION_AND_EXPANSION
  BRAND_POSITIONING_AND_AUTHORITY
  REVENUE_GROWTH
  ANALYTICS_AND_OPTIMIZATION
}

enum OfferingType {
  PRODUCT
  SERVICE
}

enum ToneOfVoiceType {
  PROFESSIONAL
  CASUAL
  FRIENDLY
  AUTHORITATIVE
  PLAYFUL
}

enum IndustryType {
  TECHNOLOGY
  FINANCE
  HEALTHCARE
  RETAIL
  MANUFACTURING
  EDUCATION
  CONSULTING
  OTHER
}

enum OrderStatus {
  PENDING
  ACCEPTED
  CANCELED
  COMPLETED
}

enum From {
  BUYER
  SELLER
}

enum State {
  QUEUE
  PUBLISHED
  ERROR
  DRAFT
}

enum SubscriptionTier {
  STANDARD
  PRO
  TEAM
  ULTIMATE
}

enum Period {
  MONTHLY
  YEARLY
}

enum Provider {
  LOCAL
  GITHUB
  GOOGLE
  FARCASTER
  WALLET
  GENERIC
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum APPROVED_SUBMIT_FOR_ORDER {
  NO
  WAITING_CONFIRMATION
  YES
}
